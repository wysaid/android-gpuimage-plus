apply plugin: 'com.android.library'

def usingCMakeCompile() {
    /// define  gradle.ext.usingCMakeCompile = false to disable CMakeCompile Mode.
    return gradle.ext != null && gradle.ext.has("usingCMakeCompile") && gradle.ext.usingCMakeCompile;
}

def usingCMakeCompileDebug() {
    /// define  gradle.ext.usingCMakeCompileDebug = true to enable CMake Debug Mode.
    return gradle.ext != null && gradle.ext.has("usingCMakeCompileDebug") && gradle.ext.usingCMakeCompileDebug;
}

def disableVideoModule() {
    return gradle.ext != null && gradle.ext.has("disableVideoModule") && gradle.ext.disableVideoModule;
}

def deployArtifacts() {
    return gradle.ext != null && gradle.ext.has("deployArtifacts") && gradle.ext.deployArtifacts;
}

def enable16kPageSizes() {
    return gradle.ext != null && gradle.ext.has("enable16kPageSizes") && gradle.ext.enable16kPageSizes;
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    buildFeatures {
        buildConfig true
    }

    if (usingCMakeCompile()) {
        ndkVersion rootProject.ext.android.ndkVersion
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion

        buildConfigField("boolean", "CGE_USE_VIDEO_MODULE", disableVideoModule() ? "false" : "true")

        if (usingCMakeCompile()) {
            externalNativeBuild {
                cmake {
                    def cppExtraFlags = "";

                    if (usingCMakeCompileDebug()) {
                        arguments "-DCMAKE_BUILD_TYPE=Debug"
                        cppExtraFlags = "-DDEBUG=1 -D_DEBUG=1 -O0 -g"
                    } else {
                        arguments "-DCMAKE_BUILD_TYPE=Release"
                        cppExtraFlags = "-Os -DNDEBUG=1 -D_NDEBUG=1"
                    }

                    if (disableVideoModule()) {
                        arguments "-DCGE_USE_VIDEO_MODULE=OFF"
                    } else {
                        arguments "-DCGE_USE_VIDEO_MODULE=ON"
                    }

                    if (enable16kPageSizes()) {
                        arguments "-DENABLE_16K_PAGE_SIZES=ON"
                    }

                    arguments "-DANDROID_STL=c++_static",
                            "-DANDROID_ARM_NEON=TRUE",
                            "-DANDROID_GRADLE=ON",
                            "-Wno-deprecated"

                    cFlags "-ffast-math -fPIE -fPIC -DNO_LOCALE_SUPPORT=1 -DANDROID_NDK=1 -D__STDC_CONSTANT_MACROS=1 ${cppExtraFlags}"
                    cppFlags "-ffast-math -fPIE -fPIC -DNO_LOCALE_SUPPORT=1 -DANDROID_NDK=1 -D__STDC_CONSTANT_MACROS=1 -frtti -std=c++14 -fno-exceptions -fvisibility-inlines-hidden ${cppExtraFlags}"

                    println("cmake arguments: " + arguments)
                    println("cppFlags: " + cppFlags)
                }
            }

            ndk {
                abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64', 'x86'
                // if (!usingCMakeCompileDebug()) {
                //     debugSymbolLevel ''
                // }
            }
        }
    }

    if (usingCMakeCompile()) {
        externalNativeBuild {
            cmake {
                path 'src/main/jni/CMakeLists.txt'
                version rootProject.ext.android.cmakeVersion
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    ////////////////////////////////////////

    sourceSets.main {
        if (!usingCMakeCompile()) {
            jniLibs.srcDir 'src/main/libs' //set libs as .so's location instead of jni
            jni.srcDirs = [] //disable automatic ndk-build call with auto-generated Android.mk file
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    namespace = 'org.wysaid.library'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:' + rootProject.ext.android.appcompatX
}

if (deployArtifacts()) {
    apply plugin: 'maven-publish'

    def siteUrl = 'https://github.com/wysaid/android-gpuimage-plus'
    def gitUrl = 'https://github.com/wysaid/android-gpuimage-plus.git'
    group = "org.wysaid"

    if (enable16kPageSizes()) {
        version = rootProject.ext.android.versionName + '-16k'
    } else {
        version = rootProject.ext.android.versionName
    }

    if (disableVideoModule()) {
        version += '-min'
    }

    publishing {
        publications {
            release(MavenPublication) {
                artifactId = 'gpuimage-plus'
                groupId = 'org.wysaid'
                version = version

                afterEvaluate {
                    // Use the correct Android component
                    from components.findByName('release') ?: components.findByName('default')
                    
                    // Ensure the AAR file is included and declare the correct dependencies
                    artifact bundleReleaseAar
                }

                pom {
                    name = 'gpuimage-plus'
                    description = 'A C++ & Java library for Image/Camera/Video filters.'
                    url = siteUrl

                    developers {
                        developer {
                            id = 'wysaid'
                            name = 'Wang Yang'
                            email = 'wysaid@gmail.com'
                        }
                    }

                    scm {
                        connection = gitUrl
                        developerConnection = gitUrl
                        url = siteUrl
                    }

                    licenses {
                        license {
                            name = 'The MIT License'
                            url = 'https://github.com/wysaid/android-gpuimage-plus/blob/master/LICENSE'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = "local_repo"
                url = gradle.ext.localRepoDir
//            credentials {
//                username = gradle.ext.repoUsername
//                password = gradle.ext.repoPassword
//            }
            }
        }
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        archiveClassifier.set('sources')
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }

}

